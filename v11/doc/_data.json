{
    "version": "0.1",
    "pageContent": 
	{
        "_comments": "object that contains data for page labels, buttons, etc.",
        "navItems": 
		{
            "_common": 
			{
                "buttonBackToGallery": 
				{
                    "name": "Back To Gallery",
					"method": "backToGallery()",
					"idName": "backToGallery"	
                },
                "buttonStartTutorial": 
				{
                    "name": "Start Tutorial",
					"method": "startTutorialFromDetailsScreen()",
					"idName": "startTutorial"
                },
				"buttonViewDetails": 
				{
                    "name": "View Details",
					"method": "viewDetails()",
					"idName": "stepsViewDetails"	
                }
            }
        }
    },
    "tutorial": 
	{
        "_common": 
		{
            "name": "Using a Throw node to throw an exception in a message flow",
            "shortDescription": "Learn how to use the throw node to throw an exception and use the Compute node to navigate the resulting ExceptionList.",
            "durationText": "This tutorial takes approximately",
            "durationTime": "10 minutes",
            "_resourceToOpenComment": "The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
            "resourceToOpen": "MainFlow",
            "helpLink": 
			{
                "text": "IBM Knowledge Center",
                "link": "/com.ibm.etools.msgbroker.helphome.doc/help_home_msgbroker.htm"
            }
        },
        "pageDetails": 
		{
            "topicsName": "Tutorial Topics",
            "_topicListComment": "A short list of product concepts or tasks demonstrated by this tutorial",
            "topicList": 
			[
                {
                    "title": "Throw node"
                }
            ],
            "outcomesName": "Learning outcomes",
            "_outcomesComment": "A description of what the user will have learned or accomplished by running this tutorial.",
            "outcomeList": 
			[
                {
                    "title": "Use IBM App Connect Enterprise to throw user exceptions and handle the ExceptionList in a message flow."
                }
            ],
            "summary": 
			{
                "overviewName": "OVERVIEW",
                "_overviewComment": "A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
                "sections": 
				[
                    {
                        "section": "This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP (any valid JSON data will do in terms of the design of the flow). The next node is a Throw node which generates a user exception which can include text defined by the flow developer as a property of the Throw node. When an exception is thrown in the message flow, it is caught by the Catch terminal of the HTTPInput node and passed to a Compute node. The Compute node is used to navigate the exception list and extract human readable data for insertion into an HTTPReply. An exception list contains information about exceptions, such as error numbers, the name of the node that generated the exception, and the reason for the exception. Typically, the most interesting information in an exception list is contained in the last exception which is most nested inside the exception list structure. An ESQL procedure is provided with the tutorial that navigates to the details of the last exception and constructs the final reply message which is returned to the requesting client using an HTTPReply node."
                    },
                    {
                        "section": "The tutorial requires an ACE integration node owned server, or a standalone server."
                    },
                    {
                        "section": "In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
                    }
                ]
            },
			"helpLinks": 
			{
				"_helpLinksComment": "Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
				"title": "Find out more",
				"details": 
				[
					{
						"title": "Knowledge Center link to ",
						"description": "Developing integration solutions by using applications",
						"link": "com.ibm.etools.mft.doc/bi12002_.htm",
						"type": "help"
					}
				]
			}
        },
        "pageSteps": 
		{
            "create": 
			{
                "overview": 
				{
                    "name": "Create",
                    "heading": "Import projects",
                    "_createComment": "A description of what will happen when the user clicks Import.",
                    "sections": 
					[
                        {
                            "section": "When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleThrowException</span>."
                        },
                        {
                            "section": "<span class='application'>ExampleThrowException</span> provides a single message flow named <span class='resource'>ThrowException</span> which receives data using an HTTPInput node. The next node in the flow is a Throw node which generates a user exception. The message is returned to the HTTPInput node and sent down its Catch terminal. Next the Compute node ESQL navigates through the ExceptionList structure, extracts the human readable text explaining the reason for the exception and embeds it within a suitable reply which is returned using the HTTPReply node at the end of the flow."
						},						
                        {
			    			"section": "Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
						}
                    ]
                },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[
                        {
                            "title": "Knowledge Center link to ",
                            "description": "Developing integration solutions by using applications",
                            "link": "com.ibm.etools.mft.doc/bi12002_.htm"
                        }
                    ]
                },
                "actions": 
				{
                    "title": "Create Actions",
                    "details": 
					[
                        {
                            "name": "Import",
                            "method": "importArtifacts()"
                        }
                    ]
                }
            },
            "prepare": 
			{
                "overview": 
				{
                    "name": "Prepare",
                    "heading": "Create an integration node and deploy the message flow",
                    "_prepareComment": "A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
                    "sections": 
		     [
			  {
              "section":"Prepare the scenario by executing the following steps:",				
                "steps":
                {
                "type":"ordered",
                "details":
                  [                    					
					{ 
                      "details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },					
					{ 
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>ThrowException.bar</span> which you will find inside the <span class='application'>ExampleThrowException</span> application."
                    }
                  ]
                }
              }
             ]
                },
                "helpLinks": 
				{
                }
            },
            "run": 
			{
                "overview": 
				{
                    "name": "Run",
                    "heading": "",
                    "_runComment": "The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
                "sections":[                            
                            {
                                "section": "<h4>Use the Flow Exerciser to test the tutorial scenario",
                                "steps": {
                                    "type": "ordered",
                                    "details": [                                      
                                    {
                                        "details": "Open <span class='resource'>ThrowException.msgflow</span>.",
                                        "substeps":{
                                        "type": "unordered",
                                        "details": 
								        [
                                        {
                                          "details": "Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                                        },   
										{
                                            "details": "Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                                        },
                                        {
                                            "details": "A saved message is provided.<br>The input message <span class='resource'>InputMessage</span> contains this data:<br><span class='resource'>{\"Message\": \"This can be anything\"}</span><br>Select the input message and click Send and your message is sent to the HTTPInput node."
                				        },											
										{
                                            "details": "After you close the dialog, the path taken through the messageflow is highlighted."											
				                        }										
                                        ]
                                        }
                                    }
                                ]
                            }
                        },
			{
			    "section": "This tutorial has shown how to use the Throw node to throw an exception and how to use the Compute node to navigate the resulting ExceptionList."
			}
                    ]
                },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[
                        {
                            "title": "Knowledge Center link to ",
                            "description": "Throw node",
                            "link": "com.ibm.etools.mft.doc/ac04830_.htm"
                        },
						{
                            "title": "Knowledge Center link to ",
                            "description": "Accessing the ExceptionList tree using ESQL",
                            "link": "com.ibm.etools.mft.doc/ac16830_.htm"
                        },
                        {
                            "title": "Knowledge Center link to ",
                            "description": "Testing your message flow by using the Flow exerciser",
                            "link": "com.ibm.etools.mft.doc/rt26110_.htm"
                        }
                    ]
                }
            }
        }
    }
}
